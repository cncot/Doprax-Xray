# 导入requests库和base64库和urllib库
import requests
import base64
import urllib

# 定义一个函数来解析订阅地址 https://raw.fastgit.org/Leon406/SubCrawler/master/sub/share/v2,
#def parse_sub(url):
   # 发送get请求获取订阅内容
   # response = requests.get(url)
    # 对内容进行base64解码
    #content = base64.b64decode(response.text + "==")
    # 按换行符分割内容
   # lines = content.splitlines()
    # 定义一个空列表来存储节点信息
  #  nodes = []

# 定义一个订阅地址，这里使用你提供的地址
#sub_url = "https://raw.fastgit.org/Leon406/SubCrawler/master/sub/share/v2"
# 调用parse_sub函数解析订阅地址，得到节点列表
#nodes = parse_sub(sub_url)


#定义一个订阅地址列表，这里使用你提供的两个地址
sub_urls = [“https://raw.fastgit.org/Leon406/SubCrawler/master/sub/share/v2”, “https://raw.fastgit.org/Leon406/SubCrawler/master/sub/share/ss”]

#遍历每个订阅地址
for sub_url in sub_urls:
# 调用parse_sub函数解析订阅地址，得到节点列表 
nodes = parse_sub(sub_url) 
# 遍历每个节点 
for node in nodes: 
# 调用check_node函数检测节点是否可用，返回布尔值 
status = check_node(node) 
# 调用print_node函数打印节点信息 
print_node(node)


    # 遍历每一行内容
    for line in lines:
        # 如果是ss节点，直接添加到列表中
        if line.startswith(b"ss://"):
            nodes.append(line)
        # 如果是ssr节点，对内容进行base64解码后添加到列表中
        elif line.startswith(b"ssr://"):
            nodes.append(base64.b64decode(line[6:] + "=="))
        # 如果是vmess节点，对内容进行base64解码后添加到列表中
        elif line.startswith(b"vmess://"):
            nodes.append(base64.b64decode(line[8:] + "=="))
        # 如果是trojan节点，直接添加到列表中
        elif line.startswith(b"trojan://"):
            nodes.append(line)
        # 否则跳过该行
        else:
            continue
    # 返回节点列表
    return nodes

# 定义一个函数来检测节点是否可用
def check_node(node):
    # 定义一个目标网址，这里使用谷歌
    target = "https://www.google.com"
    # 定义一个代理字典，根据不同的协议设置不同的代理端口
    if node.startswith(b"ss://"):
        proxy = {"http": "socks5h://127.0.0.1:1080", "https": "socks5h://127.0.0.1:1080"}
    elif node.startswith(b"ssr://"):
        proxy = {"http": "socks5h://127.0.0.1:1080", "https": "socks5h://127.0.0.1:1080"}
    elif node.startswith(b"vmess://"):
        proxy = {"http": "socks5h://127.0.0.1:10808", "https": "socks5h://127.0.0.1:10808"}
    elif node.startswith(b"trojan://"):
        proxy = {"http": "socks5h://127.0.0.1:1080", "https": "socks5h://127.0.0.1:1080"}
    else:
        return False
    # 尝试发送get请求到目标网址，设置超时时间为10秒，使用代理
    try:
        response = requests.get(target, timeout=10, proxies=proxy)
        # 如果状态码为200，表示成功访问，返回True
        if response.status_code == 200:
            return True
        # 否则返回False
        else:
            return False
    # 如果发生异常，表示无法访问，返回False
    except:
        return False

# 定义一个函数来打印节点信息
def print_node(node):
    # 如果是ss节点，按照ss://协议:密码@地址:端口#名称的格式打印
    if node.startswith(b"ss://"):
        protocol = "ss"
        password = node[5:].split(b"@")[0]
        address = node[5:].split(b"@")[1].split(b":")[0]
        port = node[5:].split(b"@")[1].split(b":")[1].split(b"#")[0]
        # 对名称进行url解码并转换为字符串
        name = urllib.parse.unquote(node[5:].split(b"@")[1].split(b":")[1].split(b"#")[1]).decode()
        print(f"{protocol}://{password}@{address}:{port}#{name}")
    



# 如果是ssr节点，按照ssr://地址:端口:协议:加密方式:混淆方式:密码#名称的格式打印
    elif node.startswith(b"ssr://"):
        protocol = "ssr"
        address = node[6:].split(b":")[0]
        port = node[6:].split(b":")[1]
        protocol2 = node[6:].split(b":")[2]
        encryption = node[6:].split(b":")[3]
        obfuscation = node[6:].split(b":")[4]
        password = node[6:].split(b":")[5].split(b"/?")[0]
        # 对名称进行url解码并转换为字符串
        name = urllib.parse.unquote(node[6:].split(b":")[5].split(b"/?")[1].split(b"remarks=")[1]).decode()
        print(f"{protocol}://{address}:{port}:{protocol2}:{encryption}:{obfuscation}:{password}#{name}")
        
    # 如果是vmess节点，按照vmess://地址:端口:id:额外id:加密方式:传输协议:伪装类型:伪装域名#名称的格式打印
    elif node.startswith(b"vmess://"):
        protocol = "vmess"
        address = node[8:].split(b"\"add\": \"")[1].split(b"\"")[0]
        port = node[8:].split(b"\"port\": ")[1].split(b",")[0]
        id = node[8:].split(b"\"id\": \"")[1].split(b"\"")[0]
        aid = node[8:].split(b"\"aid\": ")[1].split(b",")[0]
        encryption = node[8:].split(b"\"security\": \"")[1].split(b"\"")[0]
        network = node[8:].split(b"\"net\": \"")[1].split(b"\"")[0]
        type = node[8:].split(b"\"type\": \"")[1].split(b"\"")[0]
        host = node[8:].split(b"\"host\": \"")[1].split(b"\"")[0]
        # 对名称进行url解码并转换为字符串
        name = urllib.parse.unquote(node[8:].split(b"\"ps\": \"")[1].split(b"\"")[0]).decode()
        print(f"{protocol}://{address}:{port}:{id}:{aid}:{encryption}:{network}:{type}:{host}#{name}")
        
    # 如果是trojan节点，按照trojan://密码@地址:端口#名称的格式打印
    elif node.startswith(b"trojan://"):
        protocol = "trojan"
        password = node[9:].split(b"@")[0]
        address = node[9:].split(b"@")[1].split(b":")[0]
        port = node[9:].split(b"@")[1].split(b":")[1].split(b"?sni=")[0]
        # 对名称进行url解码并转换为字符串
        name = urllib.parse.unquote(node[9:].split(b"@")[1].split(b":")[1].split(b"?sni=")[1]).decode()
        print(f"{protocol}://{password}@{address}:{port}#{name}")
    # 否则不打印
    else:
        return

# 遍历每个节点
for node in nodes:
    # 调用check_node函数检测节点是否可用，返回布尔值
    status = check_node(node)
    # 调用print_node函数打印节点信息
    print_node(node)
    # 打印节点可用性
    if status:
        print("Available")
    else:
        print("Unavailable")









